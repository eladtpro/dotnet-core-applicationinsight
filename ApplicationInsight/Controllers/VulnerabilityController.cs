using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace App.Demo.ApplicationInsight.Web.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly ILogger logger;
        public readonly int timeout;
        public readonly IDictionary<string, string> orgs;


        public VulnerabilityController(IConfiguration config, ILogger<VulnerabilityController> logger)
        {
            this.logger = logger;
            timeout = config.GetValue<int>("RemoteDependecies:Timeout");
            orgs = new Dictionary<string, string>();
            config.Bind("RemoteDependecies:VulnerabilityUrls", orgs);
        }

        // GET: api/<VulnerabilityController>
        [HttpGet]
        public async Task<ContentResult> Get()
        {
            return await Task.Run(async () =>
            {
                JObject results = new JObject();
                foreach (KeyValuePair<string, string> org in orgs)
                {
                    JToken result = await Search(org.Value);
                    results.Add(new JProperty(org.Key, result));
                }

                return Content(JsonConvert.SerializeObject(results), "application/json");
            });
        }

        // GET api/<ValuesController>/cve
        [HttpGet("{org}")]
        public async Task<ContentResult> Get(string org)
        {
            if (!orgs.TryGetValue(org, out string url))
                throw new System.ArgumentOutOfRangeException(nameof(org), $"{org} is not a valid value");

            JToken result = await Search(url);
            JObject results = new JObject
            {
                new JProperty(org, result)
            };

            return Content(JsonConvert.SerializeObject(results), "application/json");
        }

        private async Task<JToken> Search(string url)
        {
            RestClient client = new RestClient(url) { Timeout = timeout };
            RestRequest request = new RestRequest(Method.GET);
            request.AddHeader("Content-Type", "application/json");
            IRestResponse response = await client.ExecuteAsync(request);

            return JToken.Parse(response.Content);
        }
    }
}
